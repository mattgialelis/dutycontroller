{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#duty-controller-docs-site","title":"Duty Controller Docs Site","text":"<p>DutyController is a Kubernetes Operator crafted to streamline the integration and management of incident management services, such as PagerDuty, directly through Kubernetes resources. This project bridges the gap in Kubernetes' native capabilities, providing a unified approach to managing incident response configurations seamlessly within a Kubernetes ecosystem.</p> <p>For more details on integrating and managing PagerDuty services, refer to the Resources section.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#docker-image","title":"Docker Image","text":"<p>The DutyController Docker image is hosted on GitHub Container Registry. You can pull the image using the following command:</p> <pre><code>docker pull ghcr.io/mattgialelis/dutycontroller/dutycontroller:latest\n</code></pre>"},{"location":"#helm-chart","title":"Helm Chart","text":"<p>To simplify the deployment of DutyController in your Kubernetes cluster, we provide a Helm chart. Add the DutyController Helm repository and install the chart with:</p> <pre><code>helm repo add duty https://mattgialelis.github.io/dutycontroller/\nhelm install dutycontroller duty/dutycontroller\n</code></pre>"},{"location":"how_to_update/","title":"How To Update These Docs","text":""},{"location":"how_to_update/#how-to-update-thesse-docs","title":"How to Update thesse docs","text":"<p>For more detailed information on how to contribute to this project, please refer to the Contributing file.</p>"},{"location":"how_to_update/#local-development","title":"Local Development","text":"<p>Install Material for MkDocs with <code>pip</code>, ideally by using a virtual environment.</p> <pre><code>pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-awesome-pages-plugin\n</code></pre> <p>In the repository root run: <pre><code>$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.58 seconds\nINFO     -  [09:52:56] Watching paths for changes: 'docs', 'mkdocs.yaml'\nINFO     -  [09:52:56] Serving on http://127.0.0.1:8000/\nINFO     -  [09:52:57] Browser connected: http://localhost:8000/\n</code></pre> Edit markdown files in the <code>docs/</code> folder or the <code>mkdocs.yaml</code> file. Visit http://localhost:8000/ to see your docs rendered live as you type.</p> <p>Once done, please create PR.</p>"},{"location":"installation/helm/","title":"Deploying DutyController with Helm","text":"<p>DutyController is a Kubernetes Operator designed to facilitate the integration and management of incident management services like PagerDuty directly through Kubernetes resources. This guide covers the steps to deploy DutyController using Helm, a package manager for Kubernetes that simplifies the deployment and management of applications.</p>"},{"location":"installation/helm/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following prerequisites installed and configured:</p> <ul> <li>Kubernetes cluster</li> <li>Helm 3</li> </ul>"},{"location":"installation/helm/#adding-the-dutycontroller-helm-repository","title":"Adding the DutyController Helm Repository","text":"<p>To install DutyController, you first need to add the Helm repository that contains the DutyController chart. Run the following command to add the repository:</p> <pre><code>helm repo add duty https://mattgialelis.github.io/dutycontroller/\n</code></pre> <p>This command adds the DutyController repository under the name <code>duty</code>. Once added, you can search for the DutyController chart in the repository.</p>"},{"location":"installation/helm/#installing-dutycontroller","title":"Installing DutyController","text":"<p>With the repository added, you can now install DutyController into your Kubernetes cluster. Use the following command to install DutyController using Helm:</p> <pre><code>helm install dutycontroller duty/dutycontroller\n</code></pre> <p>This command deploys DutyController on the Kubernetes cluster in the default configuration. The <code>helm install</code> command deploys a new instance of DutyController and assigns it the release name <code>dutycontroller</code>.</p>"},{"location":"installation/helm/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installing, you can verify that DutyController is running by checking the deployed pods:</p> <pre><code>kubectl get pods\n</code></pre> <p>Look for the pods that start with <code>dutycontroller-</code> prefix. If the pods are running, DutyController has been successfully deployed.</p>"},{"location":"installation/helm/#updating-dutycontroller","title":"Updating DutyController","text":"<p>To update DutyController to the latest version, first update your Helm repository to fetch the latest charts:</p> <pre><code>helm repo update\n</code></pre> <p>Then, upgrade DutyController using Helm:</p> <pre><code>helm upgrade dutycontroller duty/dutycontroller\n</code></pre> <p>This command upgrades DutyController to the latest version available in the repository.</p>"},{"location":"installation/helm/#uninstalling-dutycontroller","title":"Uninstalling DutyController","text":"<p>If you wish to remove DutyController from your cluster, you can uninstall it using Helm:</p> <pre><code>helm uninstall dutycontroller\n</code></pre> <p>This command removes all the Kubernetes components associated with the release and deletes the <code>dutycontroller</code> release.</p>"},{"location":"installation/helmvalues/","title":"DutyController Helm Chart Configuration","text":"<p>This document outlines the configurable values for the DutyController Helm chart. These values can be adjusted to tailor the deployment of DutyController to your Kubernetes cluster.</p>"},{"location":"installation/helmvalues/#configuration-values","title":"Configuration Values","text":""},{"location":"installation/helmvalues/#general-configuration","title":"General Configuration","text":"<ul> <li><code>nameOverride</code>: Overrides the chart name for resources (default: <code>\"\"</code>).</li> <li><code>fullnameOverride</code>: Overrides the full name of the resources (default: <code>\"\"</code>).</li> <li><code>imagePullSecrets</code>: Specifies docker-registry secret names as an array (default: <code>[]</code>).</li> </ul>"},{"location":"installation/helmvalues/#controller-options","title":"Controller Options","text":"<ul> <li><code>leaderElect</code>: Enables leader election for controller manager (default: <code>false</code>).</li> <li><code>livenessProbe</code>: Configures the liveness probe for the controller (default: HTTP GET <code>/healthz</code>).</li> <li><code>readinessProbe</code>: Configures the readiness probe for the controller (default: HTTP GET <code>/readyz</code>).</li> <li><code>replicaCount</code>: Number of DutyController replicas (default: <code>1</code>).</li> </ul>"},{"location":"installation/helmvalues/#image-configuration","title":"Image Configuration","text":"<ul> <li><code>image.repository</code>: The repository for the DutyController image (default: <code>ghcr.io/mattgialelis/dutycontroller</code>).</li> <li><code>image.pullPolicy</code>: Image pull policy (default: <code>IfNotPresent</code>).</li> <li><code>image.tag</code>: The image tag to use (default: chart <code>appVersion</code>).</li> </ul>"},{"location":"installation/helmvalues/#resource-limits-and-requests","title":"Resource Limits and Requests","text":"<ul> <li><code>resources</code>: CPU/memory resource requests/limits (default: <code>100m</code> CPU, <code>128Mi</code> memory).</li> </ul>"},{"location":"installation/helmvalues/#service-account-configuration","title":"Service Account Configuration","text":"<ul> <li><code>serviceAccount.create</code>: Specifies whether a service account should be created (default: <code>true</code>).</li> <li><code>serviceAccount.automount</code>: Automount service account token (default: <code>true</code>).</li> <li><code>serviceAccount.annotations</code>: Annotations to add to the service account (default: <code>{}</code>).</li> <li><code>serviceAccount.name</code>: The name of the service account to use.</li> </ul>"},{"location":"installation/helmvalues/#rbac-configuration","title":"RBAC Configuration","text":"<ul> <li><code>rbac.create</code>: Specifies whether RBAC resources should be created (default: <code>true</code>).</li> </ul>"},{"location":"installation/helmvalues/#monitoring-configuration","title":"Monitoring Configuration","text":"<ul> <li><code>monitoring.enabled</code>: Enable metrics port (default: <code>false</code>).</li> <li><code>monitoring.port</code>: Port for metrics endpoint (default: <code>8080</code>).</li> <li><code>monitoring.serviceMonitor.enabled</code>: Enable service monitor creation (default: <code>false</code>).</li> <li><code>monitoring.serviceMonitor.additionalLabels</code>: Additional labels for service monitor (default: <code>{}</code>).</li> </ul>"},{"location":"installation/helmvalues/#service-configuration","title":"Service Configuration","text":"<ul> <li><code>service.type</code>: Type of service to create (default: <code>ClusterIP</code>).</li> <li><code>service.ports</code>: Ports configuration for the service.</li> </ul>"},{"location":"installation/helmvalues/#additional-configuration","title":"Additional Configuration","text":"<ul> <li><code>extraEnv</code>: Extra environment variables to add to the container.</li> <li><code>envFrom</code>: Secrets that are mounted as <code>envFrom</code> on the pod.</li> <li><code>podAnnotations</code>: Annotations to add to the pods.</li> <li><code>podLabels</code>: Labels to add to the pods.</li> <li><code>nodeSelector</code>: Node labels for pod assignment.</li> <li><code>tolerations</code>: Tolerations for pod assignment.</li> <li><code>affinity</code>: Affinity for pod assignment.</li> <li><code>extraObjects</code>: Create dynamic manifests via values.</li> </ul>"},{"location":"installation/helmvalues/#example-usage","title":"Example Usage","text":"<p>To customize the deployment, create a <code>values.yaml</code> file with your desired values and pass it during installation:</p> <pre><code>helm install dutycontroller duty/dutycontroller -f values.yaml\n</code></pre>"},{"location":"installation/helmvalues/#example-values-file","title":"Example Values File","text":"<pre><code>image:\n  repository: ghcr.io/mattgialelis/dutycontroller\n\nenvFrom:\n  - secretRef:\n      name: dutycontroller-envs\n\nextraObjects:\n  - apiVersion: external-secrets.io/v1beta1\n    kind: ExternalSecret\n    metadata:\n      name: dutycontroller-envs\n    spec:\n      data:\n      - remoteRef:\n          conversionStrategy: Default\n          decodingStrategy: None\n          key: pagerduty-token\n        secretKey: PAGERDUTY_TOKEN\n      refreshInterval: 1h\n      secretStoreRef:\n        kind: ClusterSecretStore\n        name: myClusterStore\n</code></pre>"},{"location":"resources/pagerduty-Intro/","title":"Kubernetes CRD for PagerDuty Integration","text":"<p>The Custom Resource Definition (CRD) provided by this project is designed to facilitate the seamless onboarding of services into PagerDuty within a Kubernetes-native framework. This integration aims to leverage the power and flexibility of Kubernetes to manage and automate the configuration of incident management services, specifically tailored for PagerDuty.</p>"},{"location":"resources/pagerduty-Intro/#features-and-enhancements","title":"Features and Enhancements","text":"<ul> <li> <p>Kubernetes-Native Approach: The CRD aligns with Kubernetes principles, allowing users to manage PagerDuty services as part of their Kubernetes resource configurations. This integration ensures that the setup and maintenance of PagerDuty services feel natural to Kubernetes users, promoting infrastructure as code practices.</p> </li> <li> <p>Close Alignment with PagerDuty API: All CRDs are implemented to closely mirror the functionality provided by the PagerDuty API, ensuring that users have access to the comprehensive features offered by PagerDuty directly from their Kubernetes environment.</p> </li> <li> <p>Enhanced Functionality: While maintaining close alignment with the PagerDuty API, the CRD introduces minor improvements to streamline operations. Notably, it simplifies the creation and linkage of business services directly through a single service resource. This enhancement reduces the complexity and overhead associated with managing interconnected services, making it easier to set up comprehensive incident response workflows.</p> </li> </ul>"},{"location":"resources/pagerduty-Intro/#environment-variables-needed-for-pagerduty","title":"Environment Variables Needed for PagerDuty","text":"<p>To ensure the controller can securely interact with PagerDuty's API, it's necessary to set up certain environment variables. Below is a table detailing the required environment variable:</p> Environment Variable Description Documentation Link <code>PAGERDUTY_TOKEN</code> This token is used to authenticate the controller's requests to the PagerDuty API. Generating a General Access REST API Key"},{"location":"resources/pagerduty-Intro/#setting-up-pagerduty_token","title":"Setting Up <code>PAGERDUTY_TOKEN</code>","text":"<p>To interact with PagerDuty's API, the controller requires a REST API key. This key is specified as an environment variable (<code>PAGERDUTY_TOKEN</code>) that the controller reads at runtime. Follow the instructions in the provided documentation link to generate a General Access REST API key in PagerDuty. Once generated, ensure this key is securely stored and provided to the controller as an environment variable.</p>"},{"location":"resources/pagerduty/businessService/","title":"Business Service CRD Documentation","text":"<p>This document provides a comprehensive guide on the Business Service Custom Resource Definition (CRD) for integrating with PagerDuty services in a Kubernetes environment.</p>"},{"location":"resources/pagerduty/businessService/#example-resource","title":"Example Resource","text":"<p>Below is an example of how to define a Business Service resource:</p> <pre><code>apiVersion: pagerduty.dutycontroller.io/v1beta1\nkind: BusinessService\nmetadata:\n  labels:\n    app.kubernetes.io/name: dutycontroller\n  name: businessservice-sample\nspec:\n  description: \"Example DescriptionNew\"\n  pointOfContact: \"Example Contact\"\n  team: \"Example Team\"\n</code></pre>"},{"location":"resources/pagerduty/businessService/#feild-descriptions","title":"Feild Descriptions","text":"<p>The table below details the fields available in the Business Service CRD, their descriptions, types, and whether they are required.</p> Field Description Type Required <code>description</code> A description of the business service. string Yes <code>pointOfContact</code> The primary point of contact (person or team name) for the business service. string Yes <code>team</code> The name of the PagerDuty team associated with the business service. The corresponding team ID is looked up automatically in PagerDuty. string Yes"},{"location":"resources/pagerduty/businessService/#additional-notes","title":"Additional Notes","text":"<ul> <li>Finalizer Integration: The controller leverages finalizers to ensure the orderly deletion of PagerDuty business services, aligning the lifecycle of Kubernetes resources with their PagerDuty counterparts. This approach guarantees that resources are not left in an inconsistent state upon deletion.</li> <li>Idempotency and Duplication Prevention: In cases where a specified business service already exists within PagerDuty, the controller opts not to create a new instance. Instead, it records a log entry indicating the existence of the service. This behavior is crucial for maintaining idempotency and avoiding the unintended proliferation of duplicate services.</li> </ul>"},{"location":"resources/pagerduty/orchestrationRoutes/","title":"Orchestration Routes CRD Documentation","text":"<p>This document provides detailed guidance on configuring Orchestration Routes using the Custom Resource Definition (CRD) in a Kubernetes environment for efficient event routing to PagerDuty services.</p>"},{"location":"resources/pagerduty/orchestrationRoutes/#example-resource","title":"Example Resource","text":"<pre><code>apiVersion: pagerduty.dutycontroller.io/v1beta1\nkind: Orchestrationroutes\nmetadata:\n    labels:\n        app.kubernetes.io/name: dutycontroller\n        app.kubernetes.io/managed-by: kustomize\n    name: orchestrationroutes-sample\nspec:\n    serviceRoutes:\n        - eventOrchestration: \"Grafana AlertManager\"\n            label: \"My AlertManager\"\n            serviceRef: \"test\"\n            conditions:\n                - \"event.custom_details.component matches part 'my-service-b'\"\n        - eventOrchestration: \"Grafana AlertManager\"\n            label: \"My Service AlertManager\"\n            serviceRef: \"my-service\"\n            conditions:\n                - \"event.custom_details.component matches part 'my-service-deleteme'\"\n</code></pre>"},{"location":"resources/pagerduty/orchestrationRoutes/#field-descriptions","title":"Field Descriptions","text":"<p>The table below provides a comprehensive overview of the fields within the Orchestration Routes CRD, detailing their purpose, data type, and whether they are mandatory.</p> Field Description Type Required <code>eventOrchestration</code> Specifies the event orchestration integration in PagerDuty, such as \"Grafana AlertManager\". This field identifies the external system from which events are received. string Yes <code>label</code> Assigns a unique label to the routing rule for easy identification within PagerDuty. string Yes <code>serviceRef</code> References the <code>Services</code> custom resource that defines the PagerDuty service targeted for event routing. The system searches for a matching <code>Services</code> resource within the same namespace or directly in PagerDuty. string Yes <code>conditions</code> Lists JMESPath expressions that filter events. All conditions must evaluate to <code>true</code> for an event to be routed to the specified service. This allows for precise control over which events trigger alerts. []string No"},{"location":"resources/pagerduty/orchestrationRoutes/#additional-notes","title":"Additional Notes","text":"<ul> <li>Flexibility in Event Routing: The Orchestration Routes CRD offers granular control over event routing, enabling users to define complex routing logic based on the content of the event, thereby ensuring that alerts are directed to the most appropriate service or team.</li> <li>Integration with External Systems: By specifying <code>eventOrchestration</code>, users can seamlessly integrate with a variety of external monitoring and alerting systems, enhancing the operational efficiency of incident management workflows.</li> </ul>"},{"location":"resources/pagerduty/services/","title":"Services Custom Resource Definition (CRD)","text":"<p>The Services CRD allows for the declarative configuration of PagerDuty services within a Kubernetes environment. This document outlines how to create and manage these resources, providing a Kubernetes-native approach to incident management.</p>"},{"location":"resources/pagerduty/services/#example-resource","title":"Example Resource","text":"<p>Below is an example of a Services resource definition:</p> <pre><code>apiVersion: pagerduty.dutycontroller.io/v1beta1\nkind: Services\nmetadata:\n  name: my-service\n  labels:\n    app.kubernetes.io/name: dutycontroller\n    app.kubernetes.io/managed-by: kustomize\nspec:\n  acknowledgeTimeout: 300\n  autoResolveTimeout: 600\n  businessService: \"businessservice-sample\"\n  description: \"My services\"\n  escalationPolicy: \"test1-ep\"\n  status: \"Active\"\n</code></pre>"},{"location":"resources/pagerduty/services/#felid-descriptions","title":"Felid Descriptions","text":"<p>Each field in the Services CRD plays a crucial role in defining how the service interacts with PagerDuty. The table below provides detailed descriptions of these fields:</p> Field Description Type Required <code>description</code> A description of the PagerDuty service. string Yes <code>status</code> The status of the PagerDuty service (\"Active\" or \"Disabled\"). string Yes <code>escalationPolicy</code> The name of the escalation policy associated with the service. The corresponding escalation policy ID is looked up in PagerDuty. string Yes <code>autoResolveTimeout</code> (Optional) The number of seconds before an incident is automatically resolved. integer No <code>acknowledgeTimeout</code> (Optional) The number of seconds before an unacknowledged incident escalates. integer No <code>businessService</code> The name of the business service associated with the service. The corresponding business service ID is first looked up within the same Kubernetes namespace. If not found, it is then looked up in PagerDuty. string No"},{"location":"resources/pagerduty/services/#additional-notes","title":"Additional Notes","text":"<ul> <li>Finalizer Integration: The controller leverages finalizers to ensure the orderly deletion of PagerDuty services, aligning the lifecycle of Kubernetes resources with their PagerDuty counterparts. This approach guarantees that resources are not left in an inconsistent state upon deletion.</li> <li>Idempotency and Duplication Prevention: In cases where a specified service already exists within PagerDuty, the controller opts not to create a new instance. Instead, it records a log entry indicating the existence of the service. This behavior is crucial for maintaining idempotency and avoiding the unintended proliferation of duplicate services.</li> </ul>"}]}